package com.liuyongmei.kubo.controller.custom;

import android.content.Context;
import android.graphics.Color;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;

import com.liuyongmei.kubo.common.ToastUtils;
import com.liuyongmei.kubo.model.DataReader;
import com.liuyongmei.kubo.model.datamodel.Data;
import com.liuyongmei.kubo.model.datamodel.SpectrumData;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import lecho.lib.hellocharts.gesture.ContainerScrollType;
import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;

/**
 * Created by Administrator on 2017/3/27 0027.
 */

public class SpectrumChartView extends LineChartView implements DataReader.Callback {
    private Map<String,LineChartData> dataMap;
    public SpectrumChartView(Context context) {
        super(context);
    }

    public SpectrumChartView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public SpectrumChartView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }
    private void init(){
        dataMap=new HashMap<>(16);

        //设置相关显示特性
        this.setInteractive(true);
        this.setZoomType(ZoomType.HORIZONTAL_AND_VERTICAL);
        this.setContainerScrollEnabled(true, ContainerScrollType.HORIZONTAL);
        this.setVisibility(View.VISIBLE);
    }
    @Override
    public void onReceive(final Data data) {
        if(data instanceof  SpectrumData) {
            SpectrumData spectrumData=(SpectrumData) data;
            LineChartData chartData=createLineData(spectrumData);
            dataMap.put(String.valueOf(spectrumData.port),chartData);
        }
    }

    public void switchView(int port){
        LineChartData data=this.dataMap.get(String.valueOf(port));
        if(data==null){
            ToastUtils.longShow(this.getContext(),"未接受到此端口数据"+port);
        }
        this.setLineChartData(data);
    }


    private LineChartData createLineData(SpectrumData data){
            //ads
            float[] adsXAxis=data.adsPPo;
            float[] adsYAxis=data.adsVomume;

            List<PointValue> adsPoints = new ArrayList<PointValue>(adsXAxis.length);
            for (int i=0,len=data.adsMax;i<len;i++){
                adsPoints.add(new PointValue(adsXAxis[i], adsXAxis[i]));
            }
            Line adsLine = new Line(adsPoints).setColor(Color.BLUE).setStrokeWidth(2);
            //des
            float[] desXAxis=data.adsPPo;
            float[] desYAxis=data.adsVomume;
            List<PointValue> desPoints = new ArrayList<PointValue>(adsXAxis.length);
            for (int i=0,len=data.desMax;i<len;i++){
                desPoints.add(new PointValue(desXAxis[i], desYAxis[i]));
            }
            Line desLine = new Line(desPoints).setColor(Color.GREEN).setStrokeWidth(1);
            List<Line> lines = new ArrayList<Line>(2);
            lines.add(adsLine);
            lines.add(desLine);

            //构建图数据
            LineChartData chartData = new LineChartData();
            //放入折线数据
            chartData.setLines(lines);
            //设置x轴
            Axis xAxis=new Axis();
            xAxis.setName("Relative Pressure[P/PO]");
            List<AxisValue> xAxisValues=new ArrayList<>(10);
            float xValue=0;
            for(int i=0;i<=10;i++){
                xValue=i*0.1f;
                xAxisValues.add(new AxisValue(xValue).setLabel(xValue+""));
            }
            xAxis.setValues(xAxisValues);
            chartData.setAxisXBottom(xAxis);
            //设置y轴
            Axis yAxis=new Axis();
            yAxis.setName("Volumn[ml/g]");
            yAxis.setAutoGenerated(true);
            chartData.setAxisYLeft(yAxis);

            return chartData;
    }
}
