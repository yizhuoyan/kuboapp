package com.liuyongmei.kubo.view;

import android.content.Context;
import android.graphics.Color;
import android.util.AttributeSet;
import android.view.View;

import com.liuyongmei.kubo.common.ToastUtils;
import com.liuyongmei.kubo.model.AppService;
import com.liuyongmei.kubo.model.SyncMessageListener;
import com.liuyongmei.kubo.model.datamodel.KuboData;
import com.liuyongmei.kubo.model.datamodel.SpectrumKuboData;
import com.liuyongmei.kubo.model.datamodel.SyncMessage;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import lecho.lib.hellocharts.gesture.ContainerScrollType;
import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.ValueShape;
import lecho.lib.hellocharts.view.LineChartView;

/**
 * Created by Administrator on 2017/3/27 0027.
 */

public class PortSpectrumChartView extends LineChartView implements SyncMessageListener {
    private static final String TAG = PortListView.class.getName();
    // //保证图谱数据的顺序
    private Map<String, LineChartData> chartDataMap= new LinkedHashMap<>(16,1);

    public PortSpectrumChartView(Context context) {
        super(context);
    }

    public PortSpectrumChartView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public PortSpectrumChartView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }


    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();
        //设置相关显示特性
        this.setInteractive(true);
        this.setZoomType(ZoomType.HORIZONTAL_AND_VERTICAL);
        //this.setContainerScrollEnabled(true, ContainerScrollType.HORIZONTAL);
        this.setVisibility(View.VISIBLE);
    }

    @Override
    public void onReceive(SyncMessage message) {
        if(message instanceof SpectrumKuboData) {
            SpectrumKuboData spectrumData = (SpectrumKuboData) message;
            LineChartData lineData =createLineData(spectrumData);
            chartDataMap.put(String.valueOf(spectrumData.port), lineData);
        }
    }


    public void switchView(int port) {
       final LineChartData data=this.chartDataMap.get(String.valueOf(port));
        if (data == null) {
            ToastUtils.longShow(this.getContext(), "未接受到此端口[" + port + "]数据，请稍候。。");
        }
        this.post(new Runnable() {
            @Override
            public void run() {
                setLineChartData(data);
            }
        });
    }


    private LineChartData createLineData(SpectrumKuboData data) {
        //ads
        float[] adsXAxis = data.adsPPo;
        float[] adsYAxis = data.adsVomume;
        //转换为坐标点
        List<PointValue> adsPoints = new ArrayList<PointValue>(adsXAxis.length);
        for (int i = 0, len = data.adsMax; i < len; i++) {
            adsPoints.add(new PointValue(adsXAxis[i], adsYAxis[i]));
        }
        Line adsLine = new Line(adsPoints);
        adsLine.setHasLines(true);//是否用线显示。
        adsLine.setStrokeWidth(1);
        adsLine.setColor(Color.BLUE);
        adsLine.setCubic(false);////曲线是否平滑
        adsLine.setFilled(false);//是否填充曲线的面积


        adsLine.setHasPoints(true);//是否用点显示
        adsLine.setShape(ValueShape.CIRCLE);//折线图上每个数据点的形状
        adsLine.setPointRadius(2);
        adsLine.setPointColor(Color.BLUE);

        //des
        float[] desXAxis = data.desPPo;
        float[] desYAxis = data.desVomume;
        //转换为坐标点
        List<PointValue> desPoints = new ArrayList<PointValue>(adsXAxis.length);
        for (int i = 0, len = data.desMax; i < len; i++) {
            desPoints.add(new PointValue(desXAxis[i], desYAxis[i]));
        }
        Line desLine = new Line(desPoints);
        //线
        desLine.setHasLines(true);
        desLine.setColor(Color.RED);
        desLine.setStrokeWidth(1);
        desLine.setHasLines(true);
        //点
        desLine.setHasPoints(true);
        desLine.setShape(ValueShape.CIRCLE);
        desLine.setPointColor(Color.RED);
        desLine.setPointRadius(2);


        List<Line> lines = new ArrayList<Line>(2);
        lines.add(adsLine);
        lines.add(desLine);

        //构建图数据
        LineChartData chartData = new LineChartData();
        //放入折线数据
        chartData.setLines(lines);
        //设置x轴
        Axis xAxis =Axis.generateAxisFromRange(0,1f,0.1f);
        xAxis.setName("Relative Pressure[P/PO]");
        xAxis.setAutoGenerated(true);
        xAxis.setTextSize(10);
        xAxis.setMaxLabelChars(3); //最多几个坐标文字(0-32)
        xAxis.setHasLines(true); //x 轴分割线
        xAxis.setLineColor(Color.BLACK);
        xAxis.setTextColor(Color.BLACK);

        chartData.setAxisXBottom(xAxis);

        //设置y轴
        Axis yAxis = new Axis();
        yAxis.setName("Volumn[ml/g]");
        yAxis.setAutoGenerated(true);
        yAxis.setHasLines(true); //y 轴分割线
        yAxis.setMaxLabelChars(3); //最多几个坐标文字(0-32)
        yAxis.setTextSize(10);
        yAxis.setHasSeparationLine(true);//有分割线
        yAxis.setLineColor(Color.BLACK);
        yAxis.setTextColor(Color.BLACK);

        chartData.setAxisYLeft(yAxis);


        return chartData;
    }


}
