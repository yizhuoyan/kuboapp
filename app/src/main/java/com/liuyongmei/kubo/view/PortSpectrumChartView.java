package com.liuyongmei.kubo.controller.custom;

import android.content.Context;
import android.graphics.Color;
import android.util.AttributeSet;
import android.view.View;

import com.liuyongmei.kubo.common.ToastUtils;
import com.liuyongmei.kubo.model.AppService;
import com.liuyongmei.kubo.model.SyncMessageListener;
import com.liuyongmei.kubo.model.datamodel.KuboData;
import com.liuyongmei.kubo.model.datamodel.SpectrumKuboData;
import com.liuyongmei.kubo.model.datamodel.SyncMessage;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import lecho.lib.hellocharts.gesture.ContainerScrollType;
import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;

/**
 * Created by Administrator on 2017/3/27 0027.
 */

public class PortSpectrumChartView extends LineChartView implements SyncMessageListener {
    private static final String TAG = PortListView.class.getName();
    private Map<String, SpectrumKuboData> spectrumDataMap;

    public PortSpectrumChartView(Context context) {
        super(context);
    }

    public PortSpectrumChartView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public PortSpectrumChartView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    {
        init();
    }

    private void init() {
        //保证图谱数据的顺序
        spectrumDataMap = new LinkedHashMap<>(16);
        //对谱图数据感兴趣
        AppService.getInstance().addReceiveDataListener(KuboData.PORTS_SPECTRUM,this);

        //设置相关显示特性
        this.setInteractive(false);
        this.setZoomType(ZoomType.HORIZONTAL_AND_VERTICAL);
        this.setContainerScrollEnabled(true, ContainerScrollType.HORIZONTAL);
        this.setVisibility(View.VISIBLE);
    }



    public void switchView(int port) {
        SpectrumKuboData data=this.spectrumDataMap.get(String.valueOf(port));
        if (data == null) {
            ToastUtils.longShow(this.getContext(), "未接受到此端口[" + port + "]数据，请稍候。。");
        }
        final LineChartData lineData =createLineData(data);
        this.post(new Runnable() {
            @Override
            public void run() {
                setLineChartData(lineData);
            }
        });

    }


    private LineChartData createLineData(SpectrumKuboData data) {
        //ads
        float[] adsXAxis = data.adsPPo;
        float[] adsYAxis = data.adsVomume;

        List<PointValue> adsPoints = new ArrayList<PointValue>(adsXAxis.length);
        for (int i = 0, len = data.adsMax; i < len; i++) {
            adsPoints.add(new PointValue(adsXAxis[i], adsXAxis[i]));
        }
        Line adsLine = new Line(adsPoints).setColor(Color.BLUE);
        adsLine.setStrokeWidth(1);
        adsLine.setHasPoints(false);
        //des
        float[] desXAxis = data.adsPPo;
        float[] desYAxis = data.adsVomume;
        List<PointValue> desPoints = new ArrayList<PointValue>(adsXAxis.length);
        for (int i = 0, len = data.desMax; i < len; i++) {
            desPoints.add(new PointValue(desXAxis[i], desYAxis[i]));
        }
        Line desLine = new Line(desPoints).setColor(Color.GREEN);
        desLine.setHasPoints(false);//不显示节点
        desLine.setStrokeWidth(1);
        List<Line> lines = new ArrayList<Line>(2);
        lines.add(adsLine);
        lines.add(desLine);

        //构建图数据
        LineChartData chartData = new LineChartData();
        //放入折线数据
        chartData.setLines(lines);
        //设置x轴
        Axis xAxis = new Axis();
        xAxis.setName("Relative Pressure[P/PO]" + data.port);
        List<AxisValue> xAxisValues = new ArrayList<>(10);
        float xValue = 0;
        for (int i = 0; i <= 10; i++) {
            xValue = i * 0.1f;
            xAxisValues.add(new AxisValue(xValue).setLabel(xValue + ""));
        }
        xAxis.setValues(xAxisValues);
        chartData.setAxisXBottom(xAxis);
        //设置y轴
        Axis yAxis = new Axis();
        yAxis.setName("Volumn[ml/g]");
        yAxis.setAutoGenerated(true);
        chartData.setAxisYLeft(yAxis);

        return chartData;
    }

    @Override
    public void onReceive(SyncMessage message) {
        if(message instanceof SpectrumKuboData) {
            SpectrumKuboData spectrumData = (SpectrumKuboData) message;
            spectrumDataMap.put(String.valueOf(spectrumData.port), spectrumData);
            if(spectrumDataMap.size()==1){
                //默认展示第一个
                this.switchView(spectrumData.port);
            }
        }
    }
}
